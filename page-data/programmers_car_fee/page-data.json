{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/programmers_car_fee/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dev.HS"}},"markdownRemark":{"id":"c135c576-6a61-54f1-8af1-1b84b084fbf3","excerpt":"문제 주차요금계산 접근 방법 차량 번호와 출차 기록을 딕셔너리에 같이 넣음 출차기록을 파싱하여 주차 시간 계산 출차기록의 길이가 홀수인 경우 -> 11:59를 출차시간으로 계산 짝수인 경우 -> 그냥 파싱 총 주차시간을 더해서 요금 측정 코드","html":"<h1>문제</h1>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/92341\">주차요금계산</a></p>\n<h1>접근 방법</h1>\n<ol>\n<li>\n<p>차량 번호와 출차 기록을 딕셔너리에 같이 넣음</p>\n</li>\n<li>\n<p>출차기록을 파싱하여 주차 시간 계산</p>\n<ul>\n<li>\n<p>출차기록의 길이가 홀수인 경우 -> 11:59를 출차시간으로 계산</p>\n</li>\n<li>\n<p>짝수인 경우 -> 그냥 파싱</p>\n</li>\n</ul>\n</li>\n<li>\n<p>총 주차시간을 더해서 요금 측정</p>\n</li>\n</ol>\n<h1>코드</h1>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"base16-light\"  >\n          <code slot=\"code\">from math import ceil\n\ndef solution(fees, records):\nanswer = []\ntotal_time = []\ncar_num_time_dict = {}\n\n    basic_time, basic_fee, cri_time, cri_fee = fees[0], fees[1], fees[2], fees[3]\n\n    for r in records:\n        time, car_num, in_out = r.split()\n\n        if car_num not in car_num_time_dict:\n            car_num_time_dict[car_num] = [time]\n\n        else:\n            car_num_time_dict[car_num].append(time)\n\n    car_num_time_dict = sorted(car_num_time_dict.items())\n    print(car_num_time_dict)\n\n    for car_info, time_line in car_num_time_dict:\n        total = 0\n        # 출차한 기록이 없을 경우\n        if len(time_line) % 2 != 0:\n            for i in range(0, len(time_line) - 1, 2):\n                start_h, start_m = map(int, time_line[i].split(&quot;:&quot;))\n                end_h, end_m = map(int, time_line[i + 1].split(&quot;:&quot;))\n                # 시간 계산\n                total += (end_h * 60 + end_m) - (start_h * 60 + start_m)\n\n            start_h, start_m = map(int, time_line[-1].split(&quot;:&quot;))\n            total += (23 * 60 + 59) - (start_h * 60 + start_m)\n\n        else:\n            for i in range(0, len(time_line), 2):\n                start_h, start_m = map(int, time_line[i].split(&quot;:&quot;))\n                end_h, end_m = map(int, time_line[i + 1].split(&quot;:&quot;))\n                # 시간 계산\n                total += (end_h * 60 + end_m) - (start_h * 60 + start_m)\n\n        total_time.append(total)\n\n    for time in total_time:\n        if time &lt;= basic_time:\n            total_fee = basic_fee\n\n        else:\n            total_fee = basic_fee + ceil((time - basic_time) / cri_time) * cri_fee\n\n        answer.append(total_fee)\n    return answer</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"[프로그래머스] 주차요금계산","date":"July 19, 2022","description":"2022 카카오 개발자","tags":["algorithm","python"]}},"previous":{"fields":{"slug":"/programmers_64061/"},"frontmatter":{"title":"[프로그래머스] 크레인 인형뽑기 게임"}},"next":null},"pageContext":{"id":"c135c576-6a61-54f1-8af1-1b84b084fbf3","previousPostId":"1cab9b28-f8ac-585a-aefa-59c6f859968c","nextPostId":null}},
    "staticQueryHashes": ["2841359383"]}