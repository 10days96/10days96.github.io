{"version":3,"file":"component---src-templates-blog-post-tsx-71acb92a868de15b79bf.js","mappings":"kMAwCA,EAhCmB,SAAC,GAAwD,IAGpEA,EAHcC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAE7BC,EADe,MACMH,EAASI,SAiBpC,OAbIL,EADDI,EAEKE,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,gBACVD,EAAAA,cAACE,EAAAA,KAAD,CAAMC,GAAG,KAAKP,IAKlBI,EAAAA,cAACE,EAAAA,KAAD,CAAMD,UAAU,mBAAmBE,GAAG,KACjCP,GAMTI,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBAAiB,oBAAmBH,GAC/CE,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,iBAAiBP,GACnCM,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,QAAQJ,GACxBG,EAAAA,cAAAA,SAAAA,KAAAA,MACO,IAAII,MAAOC,cADlB,mBAGIL,EAAAA,cAAAA,IAAAA,CAAGM,KAAK,4BAAR,a,UCiEhB,EAvEyB,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,KAAMZ,EAAoC,EAApCA,SACzBa,EAAmBD,EAAKE,eAAeC,YAAYd,MACnDe,EAAkBJ,EAAKE,eAAeC,YAAYE,KAClDC,EAAyBN,EAAKE,eAAeC,YAAYI,KACzDC,EAAqBR,EAAKS,QAC1BC,EAAkBV,EAAKE,eAAeS,KACtCC,EAAmBZ,EAAKa,KAAKC,aAAazB,OAAvBW,QACjBe,EAAuBf,EAAvBe,SAAUC,EAAahB,EAAbgB,KAIlB,OAFAC,QAAQC,IAAIlB,EAAKE,eAAeC,aAG9BV,EAAAA,cAAC0B,EAAD,CAAY/B,SAAUA,EAAUC,MAAOuB,GACrCnB,EAAAA,cAAC2B,EAAAA,EAAD,CACE/B,MAAOY,EACPoB,YAAapB,GAAaO,IAE5Bf,EAAAA,cAAAA,UAAAA,CACEC,UAAU,YACV4B,WAAS,EACTC,SAAS,6BAET9B,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAI+B,SAAS,YAAYvB,GACzBR,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,aACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OAAOY,GACtBb,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OAAOY,IAExBb,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,QACbD,EAAAA,cAAAA,OAAAA,KAAOW,KAIXX,EAAAA,cAAAA,UAAAA,CACEgC,wBAAyB,CAAEC,OAAQhB,GACnCc,SAAS,gBAEX/B,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBACbD,EAAAA,cAAAA,KAAAA,CACEkC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGXvC,EAAAA,cAAAA,KAAAA,KACGsB,GACCtB,EAAAA,cAACE,EAAAA,KAAD,CAAMC,GAAImB,EAASkB,OAAOC,KAAMC,IAAI,QAApC,KACKpB,EAASZ,YAAYd,QAI9BI,EAAAA,cAAAA,KAAAA,KACGuB,GACCvB,EAAAA,cAACE,EAAAA,KAAD,CAAMC,GAAIoB,EAAKiB,OAAOC,KAAMC,IAAI,QAC7BnB,EAAKb,YAAYd,MADpB","sources":["webpack://gatsby-starter-blog/./src/components/blogLayout.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport {PageProps, Link } from \"gatsby\"\n\ntype DataProps = {\n    title: string\n}\n\nconst BlogLayout = ({ location, title, children }: PageProps<DataProps>) =>{\n    const rootPath:string  = `${__PATH_PREFIX__}/`\n    const isRootPath:Boolean = location.pathname === rootPath\n    let header\n\n    if(isRootPath){\n        header = (\n            <h1 className=\"main-heading\">\n                <Link to=\"/\">{title}</Link>\n            </h1>\n        )\n    } else {\n        header = (\n            <Link className=\"header-link-home\" to=\"/\">\n                {title}\n            </Link>\n        )\n    }\n\n    return(\n        <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n            <header className=\"global-header\">{header}</header>\n            <main className=\"post\">{children}</main>\n            <footer>\n                © {new Date().getFullYear()}, Built with\n                {` `}\n                <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n            </footer>\n        </div>\n    )\n}\n\nexport default BlogLayout","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport BlogLayout from \"../components/blogLayout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  markdownRemark: {\n    frontmatter: {\n      title: string\n      date: string \n      tags: Array<string>\n    }\n    fields:{\n      slug:string\n    }\n    html: string\n  }\n  excerpt: string\n  site:{\n    siteMetadata:{\n      title: string\n    }\n  }\n}\n\n\nconst BlogPostTemplate = ({data, location}: PageProps<DataProps>) => {\n  const postTitle:string = data.markdownRemark.frontmatter.title\n  const postDate:string = data.markdownRemark.frontmatter.date\n  const postTags:Array<string> = data.markdownRemark.frontmatter.tags\n  const postExcerpt:string = data.excerpt\n  const postHtml:string = data.markdownRemark.html\n  const siteTitle:string = data.site.siteMetadata.title || `Title`\n  const { previous, next }:any = data\n\n  console.log(data.markdownRemark.frontmatter)\n\n  return(\n    <BlogLayout location={location} title={siteTitle}>\n      <Seo \n        title={postTitle}\n        description={postTitle || postExcerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{postTitle}</h1>\n          <div className=\"tag-group\">\n            <div className=\"tag\">{postTags}</div>\n            <div className=\"tag\">{postTags}</div>\n          </div>\n          <div className=\"date\">\n            <span>{postDate}</span>\n          </div>\n        </header>\n\n        <section\n          dangerouslySetInnerHTML={{ __html: postHtml }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <nav className=\"blog-post-nav\">\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        </footer>\n      </article>\n    </BlogLayout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`"],"names":["header","location","title","children","isRootPath","pathname","React","className","Link","to","Date","getFullYear","href","data","postTitle","markdownRemark","frontmatter","postDate","date","postTags","tags","postExcerpt","excerpt","postHtml","html","siteTitle","site","siteMetadata","previous","next","console","log","BlogLayout","Seo","description","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}